from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text

from models.db_api import methods as db
from config import api, ADMIN_IDS

admin_labeler = BotLabeler()
admin_labeler.vbml_ignore_case = True
admin_labeler.auto_rules = [rules.PeerRule(from_chat=False)]

@admin_labeler.message(text=['addpoints <id> <bal>', 'addpoints'], peer_ids=ADMIN_IDS)
async def addpoints(message: Message, id=None, bal=None):
    if (id is None and bal is None) and not (id.isdigit() and bal.isdigit()):
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: addpoints [vkid] [–±–∞–ª–ª—ã]')
    else:
        id = int(id)
        if bal[0] == '-':
            await message.answer('–ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
            return
        bal = int(bal)
        user = db.get_user_by_id(user_id=id)
        if not user:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ –±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        db.change_balance(id, bal)
        user = await api.users.get(id)
        user_info = db.get_user_by_id(user_id=id)
        await api.messages.send(peer_id=id, message=f'üìù–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bal} –±–∞–ª–ª–æ–≤\n\nüí°–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info.balance} –±–∞–ª–ª–æ–≤', random_id=0)
        await message.answer(f'–¢–µ–ø–µ—Ä—å —É [id{id}|{user[0].first_name} {user[0].last_name}] {user_info.balance} –±–∞–ª–ª–æ–≤.')

@admin_labeler.message(text=['delpoints <id> <bal>', 'delpoints'], peer_ids=ADMIN_IDS)
async def delpoints(message: Message, id=None, bal=None):
    if (id is None and bal is None) and not (id.isdigit() and bal.isdigit()):
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: delpoints [vkid] [–±–∞–ª–ª—ã]')
    else:
        id = int(id)
        if bal[0] == '-':
            await message.answer('–ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
            return
        bal = int(bal)
        user = db.get_user_by_id(user_id=id)
        if not user:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ –±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        if user.balance < bal:
            b = -user.balance
            db.change_balance(id, b)
        else:
            b = -bal
            db.change_balance(id, b)
        user_info = db.get_user_by_id(user_id=id)
        user = await api.users.get(id)
        await api.messages.send(peer_id=id, message=f'üìù–í–∞–º —Å–Ω—è—Ç–æ {bal} –±–∞–ª–ª–æ–≤\n\nüí°–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info.balance} –±–∞–ª–ª–æ–≤', random_id=0)
        await message.answer(f'–¢–µ–ø–µ—Ä—å —É [id{id}|{user[0].first_name} {user[0].last_name}] {user_info.balance} –±–∞–ª–ª–æ–≤.')

@admin_labeler.message(text=['checkuser <id>', 'checkuser'], peer_ids=ADMIN_IDS)
async def checkuser(message: Message, id=None):
    if id is None and not id.isdigit():
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: checkuser [vkid]')
    else:
        id = int(id)
        user = db.get_user_by_id(user_id=id)
        if not user:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ –±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        posts = db.get_post_by_id(user_id=id)

        usr = await api.users.get(id)
        text = f'–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è [id{id}|{usr[0].first_name} {usr[0].last_name}]:\n\n'+str(user)+f'\nüíº–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}'+f'\nüëÄ–û—Ü–µ–Ω–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {user.tasks}'
        if len(posts) != 0:
            text += '\n\nüåê–ü–æ—Å—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ:'
            for i in posts:
                b = i.link
                try:
                    b = await api.utils.get_short_link(i.link)
                    b = b.short_url
                except:
                    b = i.link
                text += "\n"+b + f' ‚Äì {i.comms-i.count} üí¨ –∏–∑ ' + f'{i.comms} üí¨'
        await message.answer(text)